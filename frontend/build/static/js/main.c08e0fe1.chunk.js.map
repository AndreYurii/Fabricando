{"version":3,"sources":["Header.js","Tabela.js","Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","href","TableHead","TableBody","props","linhas","autores","map","linha","index","key","nome","telefone","cpf","endereco","onClick","removeAutor","className","Tabela","this","Component","Formulario","submitFormulario","escutadorDeSubmit","state","setState","stateInicial","escutadorDeInput","event","target","name","value","htmlFor","id","type","onChange","App","filter","autor","posAtual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c08e0fe1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <nav>\n            <div class=\"nav-wrapper light-blue darken-3\">\n                <a href=\"/\" class=\"brand-logo\">COPERFORTE</a>\n                <ul class=\"right\">\n                    <li><a href=\"/nome\">Cadastrar</a></li>\n                    <li><a href=\"/nome\">Login</a></li>\n                    <li><a href=\"/nome\">Sobre</a></li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\nexport default Header;","import React, { Component } from 'react';\n\nconst TableHead = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Nome</th>\n                <th>telefone</th>\n                <th>cpf</th>\n                <th>endereco</th>\n            </tr>\n        </thead>\n    )\n}\n\n\nconst TableBody = props => {\n    const linhas = props.autores.map((linha, index) => {\n        return (\n            <tr key={index}>\n                <td>{linha.nome}</td>\n                <td>{linha.telefone}</td>\n                <td>{linha.cpf}</td>\n                <td>{linha.endereco}</td>\n                <td><button onClick = {() => {props.removeAutor(index)}} className = \"waves-effect waves-light btn light-blue darken-3\">Remover</button></td>\n            </tr>\n\n        )\n    });\n    return(\n        <tbody>\n            {linhas}\n        </tbody>\n    );\n}\n\nclass Tabela extends Component {\n    render() {\n        const { autores, removeAutor } = this.props;\n        return (\n            <table>\n                <TableHead />\n                <TableBody autores = { autores } removeAutor = {removeAutor}/>\n            </table>\n        )\n    }\n}\nexport default Tabela;\n","import React, { Component } from \"react\";\n\nclass Formulario extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.stateInicial = {\n            nome: '',\n            telefone: '',\n            cpf: '',\n            endereco: '',\n        }\n\n        this.state = this.stateInicial;\n    }\n\n    submitFormulario = () => {\n        this.props.escutadorDeSubmit(this.state);\n        this.setState(this.stateInicial);\n\n    }\n\n\n    escutadorDeInput = event => {\n        const { name, value } = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n\n        const { nome, telefone, cpf, endereco } = this.state;\n        return (\n            <form>\n                <div className=\"row\">\n                    <div className=\"input-field col s3\">\n                        <label htmlFor=\"nome\">Nome</label>\n                        <input\n                            id=\"nome\"\n                            type=\"text\"\n                            name=\"nome\"\n                            value={nome}\n                            onChange={this.escutadorDeInput}\n                        />\n                    </div>\n                    <div className=\"input-field col s3\">\n                        <label htmlFor=\"telefone\">Telefone</label>\n                        <input\n                            id=\"telefone\"\n                            type=\"text\"\n                            name=\"telefone\"\n                            value={telefone}\n                            onChange={this.escutadorDeInput}\n                        />\n\n                    </div>\n                    <div className=\"input-field col s3\">\n\n                        <label htmlFor=\"cpf\">CPF</label>\n                        <input\n                            id=\"cpf\"\n                            type=\"text\"\n                            name=\"cpf\"\n                            value={cpf}\n                            onChange={this.escutadorDeInput}\n                        />\n                    </div>\n                    <div className=\"input-field col s3\">\n\n                        <label htmlFor=\"endereco\">Endereco</label>\n                        <input\n                            id=\"endereco\"\n                            type=\"text\"\n                            name=\"endereco\"\n                            value={endereco}\n                            onChange={this.escutadorDeInput}\n                        />\n                    </div>\n                </div>\n                <button type=\"button\" onClick={this.submitFormulario} className=\"waves-effect waves-light btn light-blue darken-3\">Salvar\n            </button>\n            </form>\n\n        )\n\n    }\n}\n\nexport default Formulario;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Tabela from './Tabela';\nimport Form from './Formulario';\nimport 'materialize-css/dist/css/materialize.min.css';\n\nclass App extends Component {\n\n  state = {\n    autores:  [\n      {\n        nome: 'Paulo',\n        telefone: 'React',\n        cpf: '1000',\n        endereco: 'ssu'\n      },\n      {\n        nome: 'Paulo',\n        telefone: 'React',\n        cpf: '1000',\n        endereco: 'ssu'\n      },\n      {\n        nome: 'Paulo',\n        telefone: 'React',\n        cpf: '1000',\n        endereco: 'ssu'\n      },\n      {\n        nome: 'Paulo',\n        telefone: 'React',\n        cpf: '1000',\n        endereco: 'ssu'\n      }\n    ],\n  }\n\n  removeAutor = index =>{\n    const { autores } = this.state;\n  \n    this.setState( \n      {\n        autores : autores.filter((autor, posAtual) => {\n          return posAtual !== index;\n  \n        }),\n      }\n    );\n  } \n\n  escutadorDeSubmit = autor => {\n    this.setState({ autores:[...this.state.autores, autor]})\n  }\n\n    \nrender(){\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container mb-10\">\n      <Tabela autores = { this.state.autores } removeAutor = { this.removeAutor } />\n      <Form escutadorDeSubmit={this.escutadorDeSubmit}/>\n      </div>\n    </Fragment>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}